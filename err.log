    Checking physdes-rs v0.1.0 (/home/lubuntu/Documents/github/physdes-rs)
warning: unused import: `Neg`
  --> src/rectangle.rs:11:22
   |
11 | use core::ops::{Add, Neg, Sub};
   |                      ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Zero`
  --> src/rectangle.rs:26:23
   |
26 | use num_traits::{Num, Zero};
   |                       ^^^^

warning: unused imports: `max`, `min`
  --> src/rectangle.rs:27:16
   |
27 | use std::cmp::{max, min};
   |                ^^^  ^^^

warning: unused imports: `Add`, `Mul`, `Neg`, `Sub`
 --> src/polygon.rs:2:17
  |
2 | use core::ops::{Add, Mul, Neg, Sub};
  |                 ^^^  ^^^  ^^^  ^^^

warning: unused import: `Signed`
 --> src/polygon.rs:3:23
  |
3 | use num_traits::{Num, Signed, Zero};
  |                       ^^^^^^

warning: unused import: `crate::polygon::Polygon`
  --> src/main.rs:16:5
   |
16 | use crate::polygon::Polygon;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Signed`, `Zero`
 --> src/rpolygon.rs:2:23
  |
2 | use num_traits::{Num, Signed, Zero};
  |                       ^^^^^^  ^^^^

warning: unused import: `crate::rpolygon::RPolygon`
  --> src/main.rs:19:5
   |
19 | use crate::rpolygon::RPolygon;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: this `if` statement can be collapsed
   --> src/rpolygon.rs:122:13
    |
122 | /             if (p1.y_ <= q.y_ && q.y_ < p0.y_) || (p0.y_ <= q.y_ && q.y_ < p1.y_) {
123 | |                 if p1.x_ > q.x_ {
124 | |                     c = !c;
125 | |                 }
126 | |             }
    | |_____________^
    |
    = note: `#[warn(clippy::collapsible_if)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
122 ~             if ((p1.y_ <= q.y_ && q.y_ < p0.y_) || (p0.y_ <= q.y_ && q.y_ < p1.y_)) && p1.x_ > q.x_ {
123 +                 c = !c;
124 +             }
    |

warning: function cannot return without recursing
  --> src/rectangle.rs:78:13
   |
78 |             fn $method(self, other: &Vector2<T>) -> Self::Output {
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
79 |                 self.$method(other)
   |                 ------------------- recursive call site
...
94 | forward_all_binop!(impl Add, add);
   | --------------------------------- in this macro invocation
   |
   = note: `#[warn(unconditional_recursion)]` on by default
   = help: a `loop` may express intention better if this is on purpose
   = note: this warning originates in the macro `forward_val_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> src/rectangle.rs:78:13
    |
78  |             fn $method(self, other: &Vector2<T>) -> Self::Output {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
79  |                 self.$method(other)
    |                 ------------------- recursive call site
...
106 | forward_all_binop!(impl Sub, sub);
    | --------------------------------- in this macro invocation
    |
    = help: a `loop` may express intention better if this is on purpose
    = note: this warning originates in the macro `forward_val_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: struct is never constructed: `Polygon`
  --> src/polygon.rs:10:12
   |
10 | pub struct Polygon<T> {
   |            ^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `new`
  --> src/polygon.rs:21:12
   |
21 |     pub fn new(coords: &[Point<T>]) -> Self {
   |            ^^^

warning: associated function is never used: `signed_area_x2`
  --> src/polygon.rs:30:12
   |
30 |     pub fn signed_area_x2(&self) -> T {
   |            ^^^^^^^^^^^^^^

warning: associated function is never used: `lb`
  --> src/polygon.rs:46:12
   |
46 |     pub fn lb(&self) -> Point<T> {
   |            ^^

warning: associated function is never used: `ub`
  --> src/polygon.rs:55:12
   |
55 |     pub fn ub(&self) -> Point<T> {
   |            ^^

warning: associated function is never used: `create_xmono_polygon`
  --> src/polygon.rs:64:12
   |
64 |     pub fn create_xmono_polygon(coords: &Vec<Point<T>>) -> Vec<Point<T>> {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `create_ymono_polygon`
  --> src/polygon.rs:81:12
   |
81 |     pub fn create_ymono_polygon(coords: &Vec<Point<T>>) -> Vec<Point<T>> {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `point_in_polygon`
   --> src/polygon.rs:114:12
    |
114 |     pub fn point_in_polygon(pointset: &[Point<T>], q: &Point<T>) -> bool {
    |            ^^^^^^^^^^^^^^^^

warning: struct is never constructed: `RPolygon`
  --> src/rpolygon.rs:10:12
   |
10 | pub struct RPolygon<T> {
   |            ^^^^^^^^

warning: associated function is never used: `new`
  --> src/rpolygon.rs:21:12
   |
21 |     pub fn new(coords: &[Point<T>]) -> Self {
   |            ^^^

warning: associated function is never used: `signed_area`
  --> src/rpolygon.rs:35:12
   |
35 |     pub fn signed_area(&self) -> T {
   |            ^^^^^^^^^^^

warning: associated function is never used: `lb`
  --> src/rpolygon.rs:51:12
   |
51 |     pub fn lb(&self) -> Point<T> {
   |            ^^

warning: associated function is never used: `ub`
  --> src/rpolygon.rs:60:12
   |
60 |     pub fn ub(&self) -> Point<T> {
   |            ^^

warning: associated function is never used: `create_xmono_polygon`
  --> src/rpolygon.rs:66:12
   |
66 |     pub fn create_xmono_polygon(coords: &Vec<Point<T>>) -> (Vec<Point<T>>, bool) {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `create_ymono_polygon`
  --> src/rpolygon.rs:82:12
   |
82 |     pub fn create_ymono_polygon(coords: &Vec<Point<T>>) -> (Vec<Point<T>>, bool) {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `point_in_rpolygon`
   --> src/rpolygon.rs:117:12
    |
117 |     pub fn point_in_rpolygon(pointset: &[Point<T>], q: &Point<T>) -> bool {
    |            ^^^^^^^^^^^^^^^^^

warning: using `clone` on type `point::Point<T>` which implements the `Copy` trait
  --> src/polygon.rs:22:22
   |
22 |         let origin = coords[0].clone();
   |                      ^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `coords[0]`
   |
   = note: `#[warn(clippy::clone_on_copy)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: taken reference of right operand
  --> src/polygon.rs:25:23
   |
25 |             vecs.push(pt - &origin);
   |                       ^^^^^-------
   |                            |
   |                            help: use the right value directly: `origin`
   |
   = note: `#[warn(clippy::op_ref)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#op_ref

warning: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices
  --> src/polygon.rs:64:41
   |
64 |     pub fn create_xmono_polygon(coords: &Vec<Point<T>>) -> Vec<Point<T>> {
   |                                         ^^^^^^^^^^^^^^ help: change this to: `&[Point<T>]`
   |
   = note: `#[warn(clippy::ptr_arg)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices
  --> src/polygon.rs:81:41
   |
81 |     pub fn create_ymono_polygon(coords: &Vec<Point<T>>) -> Vec<Point<T>> {
   |                                         ^^^^^^^^^^^^^^ help: change this to: `&[Point<T>]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: using `clone` on type `point::Point<T>` which implements the `Copy` trait
  --> src/rpolygon.rs:22:22
   |
22 |         let origin = coords[0].clone();
   |                      ^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `coords[0]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: taken reference of right operand
  --> src/rpolygon.rs:25:23
   |
25 |             vecs.push(pt - &origin);
   |                       ^^^^^-------
   |                            |
   |                            help: use the right value directly: `origin`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#op_ref

warning: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices
  --> src/rpolygon.rs:66:41
   |
66 |     pub fn create_xmono_polygon(coords: &Vec<Point<T>>) -> (Vec<Point<T>>, bool) {
   |                                         ^^^^^^^^^^^^^^ help: change this to: `&[Point<T>]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices
  --> src/rpolygon.rs:82:41
   |
82 |     pub fn create_ymono_polygon(coords: &Vec<Point<T>>) -> (Vec<Point<T>>, bool) {
   |                                         ^^^^^^^^^^^^^^ help: change this to: `&[Point<T>]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: unneeded `return` statement
   --> src/rpolygon.rs:129:9
    |
129 |         return c;
    |         ^^^^^^^^^ help: remove `return`: `c`
    |
    = note: `#[warn(clippy::needless_return)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `physdes-rs` (bin "physdes-rs") generated 36 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
