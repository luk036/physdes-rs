    Checking num-traits v0.2.14
    Checking num-integer v0.1.44
    Checking num-complex v0.4.0
    Checking num-bigint v0.4.3
    Checking num-iter v0.1.42
    Checking num-rational v0.4.0
    Checking num v0.4.0
    Checking physdes-rs v0.1.0 (/home/lubuntu/Documents/github/physdes-rs)
warning: unused import: `Signed`
  --> src/point.rs:17:23
   |
17 | use num_traits::{Num, Signed, Zero};
   |                       ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0053]: method `add` has an incompatible type for trait
  --> src/point.rs:43:37
   |
43 |             fn $method(self, other: &Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `&'b Point<T>`
...
85 | forward_all_binop!(impl Add, add);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(&'a Point<T>, &'b Point<T>) -> Point<_>`
              found fn pointer `fn(&'a Point<T>, &Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_xf_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `add` has an incompatible type for trait
  --> src/point.rs:56:37
   |
56 |             fn $method(self, other: Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `Point<T>`
...
85 | forward_all_binop!(impl Add, add);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(&'a Point<T>, Point<T>) -> Point<_>`
              found fn pointer `fn(&'a Point<T>, Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_xf_val_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `add` has an incompatible type for trait
  --> src/point.rs:69:37
   |
69 |             fn $method(self, other: &Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `&'a Point<T>`
...
85 | forward_all_binop!(impl Add, add);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(Point<_>, &'a Point<T>) -> Point<_>`
              found fn pointer `fn(Point<_>, &Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_val_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `add` has an incompatible type for trait
  --> src/point.rs:92:25
   |
92 |     fn add(self, other: Vector2<T>) -> Self::Output {
   |                         ^^^^^^^^^^
   |                         |
   |                         expected struct `Point`, found struct `Vector2`
   |                         help: change the parameter type to match the trait: `Point<T>`
   |
   = note: expected fn pointer `fn(Point<_>, Point<T>) -> Point<_>`
              found fn pointer `fn(Point<_>, Vector2<T>) -> Point<_>`

error[E0053]: method `sub` has an incompatible type for trait
  --> src/point.rs:43:37
   |
43 |             fn $method(self, other: &Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `&'b Point<T>`
...
97 | forward_all_binop!(impl Sub, sub);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(&'a Point<T>, &'b Point<T>) -> Point<_>`
              found fn pointer `fn(&'a Point<T>, &Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_xf_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `sub` has an incompatible type for trait
  --> src/point.rs:56:37
   |
56 |             fn $method(self, other: Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `Point<T>`
...
97 | forward_all_binop!(impl Sub, sub);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(&'a Point<T>, Point<T>) -> Point<_>`
              found fn pointer `fn(&'a Point<T>, Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_xf_val_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `sub` has an incompatible type for trait
  --> src/point.rs:69:37
   |
69 |             fn $method(self, other: &Vector2<T>) -> Self::Output {
   |                                     ^^^^^^^^^^^
   |                                     |
   |                                     expected struct `Point`, found struct `Vector2`
   |                                     help: change the parameter type to match the trait: `&'a Point<T>`
...
97 | forward_all_binop!(impl Sub, sub);
   | --------------------------------- in this macro invocation
   |
   = note: expected fn pointer `fn(Point<_>, &'a Point<T>) -> Point<_>`
              found fn pointer `fn(Point<_>, &Vector2<T>) -> Point<_>`
   = note: this error originates in the macro `forward_val_xf_binop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `sub` has an incompatible type for trait
   --> src/point.rs:104:25
    |
104 |     fn sub(self, other: Vector2<T>) -> Self::Output {
    |                         ^^^^^^^^^^
    |                         |
    |                         expected struct `Point`, found struct `Vector2`
    |                         help: change the parameter type to match the trait: `Point<T>`
    |
    = note: expected fn pointer `fn(Point<_>, Point<T>) -> Point<_>`
               found fn pointer `fn(Point<_>, Vector2<T>) -> Point<_>`

error[E0053]: method `add_assign` has an incompatible type for trait
   --> src/point.rs:120:41
    |
120 |         fn add_assign(&mut self, other: Vector2<T>) {
    |                                         ^^^^^^^^^^
    |                                         |
    |                                         expected struct `Point`, found struct `Vector2`
    |                                         help: change the parameter type to match the trait: `Point<T>`
    |
    = note: expected fn pointer `fn(&mut Point<T>, Point<T>)`
               found fn pointer `fn(&mut Point<T>, Vector2<T>)`

error[E0053]: method `sub_assign` has an incompatible type for trait
   --> src/point.rs:127:41
    |
127 |         fn sub_assign(&mut self, other: Vector2<T>) {
    |                                         ^^^^^^^^^^
    |                                         |
    |                                         expected struct `Point`, found struct `Vector2`
    |                                         help: change the parameter type to match the trait: `Point<T>`
    |
    = note: expected fn pointer `fn(&mut Point<T>, Point<T>)`
               found fn pointer `fn(&mut Point<T>, Vector2<T>)`

error[E0053]: method `add_assign` has an incompatible type for trait
   --> src/point.rs:137:46
    |
137 |                 fn $method(&mut self, other: &Vector2<T>) {
    |                                              ^^^^^^^^^^^
    |                                              |
    |                                              expected struct `Point`, found struct `Vector2`
    |                                              help: change the parameter type to match the trait: `&'a Point<T>`
...
144 |     forward_op_assign!(impl AddAssign, add_assign);
    |     ---------------------------------------------- in this macro invocation
    |
    = note: expected fn pointer `fn(&mut Point<T>, &'a Point<T>)`
               found fn pointer `fn(&mut Point<T>, &Vector2<T>)`
    = note: this error originates in the macro `forward_op_assign` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0053]: method `sub_assign` has an incompatible type for trait
   --> src/point.rs:137:46
    |
137 |                 fn $method(&mut self, other: &Vector2<T>) {
    |                                              ^^^^^^^^^^^
    |                                              |
    |                                              expected struct `Point`, found struct `Vector2`
    |                                              help: change the parameter type to match the trait: `&'a Point<T>`
...
145 |     forward_op_assign!(impl SubAssign, sub_assign);
    |     ---------------------------------------------- in this macro invocation
    |
    = note: expected fn pointer `fn(&mut Point<T>, &'a Point<T>)`
               found fn pointer `fn(&mut Point<T>, &Vector2<T>)`
    = note: this error originates in the macro `forward_op_assign` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: cannot add `Vector2<i32>` to `Point<i32>`
  --> src/main.rs:10:24
   |
10 |     println!("{:?}", a + b);
   |                        ^ no implementation for `Point<i32> + Vector2<i32>`
   |
   = help: the trait `Add<Vector2<i32>>` is not implemented for `Point<i32>`

error[E0277]: cannot subtract `Vector2<i32>` from `Point<i32>`
  --> src/main.rs:11:24
   |
11 |     println!("{:?}", a - b);
   |                        ^ no implementation for `Point<i32> - Vector2<i32>`
   |
   = help: the trait `Sub<Vector2<i32>>` is not implemented for `Point<i32>`

error[E0277]: cannot add-assign `Vector2<i32>` to `Point<i32>`
  --> src/main.rs:14:7
   |
14 |     a += b;
   |       ^^ no implementation for `Point<i32> += Vector2<i32>`
   |
   = help: the trait `AddAssign<Vector2<i32>>` is not implemented for `Point<i32>`

error[E0277]: cannot subtract-assign `Vector2<i32>` from `Point<i32>`
  --> src/main.rs:15:7
   |
15 |     a -= b;
   |       ^^ no implementation for `Point<i32> -= Vector2<i32>`
   |
   = help: the trait `SubAssign<Vector2<i32>>` is not implemented for `Point<i32>`

error[E0308]: mismatched types
  --> src/main.rs:18:42
   |
18 |     let mm = Point::<Point<i32>>::new(a, b);
   |                                          ^ expected struct `Point`, found struct `Vector2`
   |
   = note: expected struct `Point<i32>`
              found struct `Vector2<i32>`

error[E0277]: cannot add `Vector2<T>` to `Point<T>`
  --> src/point.rs:85:30
   |
85 | forward_all_binop!(impl Add, add);
   |                              ^^^ no implementation for `Point<T> + Vector2<T>`
   |
   = help: the trait `Add<Vector2<T>>` is not implemented for `Point<T>`

error[E0277]: cannot subtract `Vector2<T>` from `Point<T>`
  --> src/point.rs:97:30
   |
97 | forward_all_binop!(impl Sub, sub);
   |                              ^^^ no implementation for `Point<T> - Vector2<T>`
   |
   = help: the trait `Sub<Vector2<T>>` is not implemented for `Point<T>`

error[E0277]: cannot add-assign `Vector2<T>` to `Point<T>`
   --> src/point.rs:144:40
    |
144 |     forward_op_assign!(impl AddAssign, add_assign);
    |                                        ^^^^^^^^^^ no implementation for `Point<T> += Vector2<T>`
    |
    = help: the trait `AddAssign<Vector2<T>>` is not implemented for `Point<T>`

error[E0277]: cannot subtract-assign `Vector2<T>` from `Point<T>`
   --> src/point.rs:145:40
    |
145 |     forward_op_assign!(impl SubAssign, sub_assign);
    |                                        ^^^^^^^^^^ no implementation for `Point<T> -= Vector2<T>`
    |
    = help: the trait `SubAssign<Vector2<T>>` is not implemented for `Point<T>`

Some errors have detailed explanations: E0053, E0277, E0308.
For more information about an error, try `rustc --explain E0053`.
warning: `physdes-rs` (bin "physdes-rs") generated 1 warning
error: could not compile `physdes-rs` due to 21 previous errors; 1 warning emitted
